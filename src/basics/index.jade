#basics.step(data-scale='1')
	h1 AngularJS Basics

include scope/index

.step(data-y='1000', data-scale='.5')
	h2 $scope.$watch
	p how you can be informed of a change on the $scope
.step(data-y='1000', data-rotate-y='90', data-rotate-x='-90', data-z='-500', data-x='250', data-scale='.5')
	p Watches allow you to establish listeners for model updates
	pre.example.
		\n$scope.myData = 'fooBar';
		$scope.$watch('myData', function(newValue, oldValue){ 
		\texpect(newValue).toEqual('fooBar');
		\texpect(newValue).toEqual($scope.myData);
		});
		\t\t\t\t\t\t          
.step(data-y='1000', data-rotate-y='90', data-rotate-x='-90', data-z='-1000', data-x='250', data-scale='.5')
	p Watches actually evaluate expressions w/ $scope as context
	pre.example.
		\n$scope.myData = 100;
		$scope.someFunction = function(d){ return d-1};
		$scope.$watch('myData + 1 + someFunction(myData)', function(newValue, oldValue){ 
		\texpect(newValue).toEqual(200);
		\texpect(newValue).toEqual(
		\t\t$scope.eval('myData + 1 + someFunction(myData)')
		\t);
		});
		\t\t\t\t\t\t          
.step(data-y='1000', data-rotate-y='90', data-rotate-x='-90', data-z='-1500', data-x='250', data-scale='.5')
	p Angular templating watches all expressions to update the DOM
	pre.example.
		\n                     
		\t\t\t\t\t\t          
.step(data-y='1500', data-scale='.5')
	h1 $scope.$digest
	p how angular knows something has changed
.step(data-y='1500', data-rotate-y='90', data-rotate-x='-90', data-z='-500', data-x='250', data-scale='.5')
	p The angular $digest is based on dirty checking all 'watched' expressions
.step(data-y='1500', data-rotate-y='90', data-rotate-x='-90', data-z='-1000', data-x='250', data-scale='.5')
	p
		| Something
		p
			| Something
//
	 
				<div class="step" data-x="1000">
					and to the right.
				</div>
				<div class="step" data-y="-800">
					Sliding upâ€¦
				</div>
				<div class="step" data-y="975">
					and  back down.
				</div>
				<div class="step" data-y="1500" data-scale="10">
					<b>AMPLIFYING</b> your <b>BIG</b> ideas
				</div>
				<div class="step" data-y="2000" data-rotate-y="90">
					... and adjusting perspective to illuminate new ones.
				</div>
				<div class="step" data-rotate-z="180" data-y="-1800" data-scale=".25">
					Thanks for joining me in exploring the functions of Impress.js. Happy coding!
				</div> 
